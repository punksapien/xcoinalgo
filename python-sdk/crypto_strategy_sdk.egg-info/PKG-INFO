Metadata-Version: 2.4
Name: crypto-strategy-sdk
Version: 1.0.0
Summary: Cryptocurrency Trading Strategy Development Kit for algorithmic trading
Home-page: https://github.com/coindcx/coindcx-sdk
Author: CoinDCX Quant Team
Author-email: Crypto Strategy Team <team@cryptostrategy.dev>
License: MIT
Project-URL: Homepage, https://github.com/crypto-strategy/crypto-strategy-sdk
Project-URL: Documentation, https://crypto-strategy-sdk.readthedocs.io
Project-URL: Repository, https://github.com/crypto-strategy/crypto-strategy-sdk.git
Project-URL: Issues, https://github.com/crypto-strategy/crypto-strategy-sdk/issues
Project-URL: Changelog, https://github.com/crypto-strategy/crypto-strategy-sdk/blob/main/CHANGELOG.md
Keywords: trading,cryptocurrency,strategy,algorithmic,bitcoin,fintech,quantitative
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas>=1.3.0
Requires-Dist: numpy>=1.20.0
Requires-Dist: requests>=2.25.0
Requires-Dist: PyYAML>=5.4.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pytz>=2021.1
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0.0; extra == "dev"
Requires-Dist: black>=21.0.0; extra == "dev"
Requires-Dist: flake8>=3.8.0; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Requires-Dist: jupyter>=1.0.0; extra == "dev"
Requires-Dist: matplotlib>=3.3.0; extra == "dev"
Requires-Dist: seaborn>=0.11.0; extra == "dev"
Provides-Extra: backtest
Requires-Dist: matplotlib>=3.3.0; extra == "backtest"
Requires-Dist: seaborn>=0.11.0; extra == "backtest"
Requires-Dist: plotly>=5.0.0; extra == "backtest"
Requires-Dist: openpyxl>=3.0.0; extra == "backtest"
Provides-Extra: all
Requires-Dist: pytest>=6.0.0; extra == "all"
Requires-Dist: pytest-cov>=2.0.0; extra == "all"
Requires-Dist: black>=21.0.0; extra == "all"
Requires-Dist: flake8>=3.8.0; extra == "all"
Requires-Dist: mypy>=0.800; extra == "all"
Requires-Dist: jupyter>=1.0.0; extra == "all"
Requires-Dist: matplotlib>=3.3.0; extra == "all"
Requires-Dist: seaborn>=0.11.0; extra == "all"
Requires-Dist: plotly>=5.0.0; extra == "all"
Requires-Dist: openpyxl>=3.0.0; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Crypto Strategy SDK

A comprehensive Python SDK for developing, testing, and deploying cryptocurrency trading strategies for algorithmic trading platforms.

## Features

- **Standardized Strategy Framework**: Abstract base class with consistent interface
- **Comprehensive Technical Indicators**: 20+ built-in indicators (MACD, RSI, Bollinger Bands, etc.)
- **Risk Management System**: Position sizing, stop-loss, and portfolio protection
- **Backtesting Engine**: Realistic backtesting with slippage and commission modeling
- **Configuration Management**: YAML/JSON-based strategy configuration
- **Performance Analytics**: Detailed performance metrics and reporting
- **Exchange Integration**: Seamless integration with cryptocurrency exchanges

## Quick Start

### Installation

```bash
# Install the SDK
pip install crypto-strategy-sdk

# Or install with all optional dependencies
pip install "crypto-strategy-sdk[all]"
```

### Basic Usage

```python
from crypto_strategy_sdk import BaseStrategy, StrategyConfig, SignalType
import pandas as pd

class MyStrategy(BaseStrategy):
    def initialize(self):
        """Initialize strategy parameters"""
        self.sma_fast = 10
        self.sma_slow = 20

    def generate_signals(self, df: pd.DataFrame) -> dict:
        """Generate trading signals"""
        # Calculate indicators
        df['sma_fast'] = self.indicators.sma(df, self.sma_fast)
        df['sma_slow'] = self.indicators.sma(df, self.sma_slow)

        # Generate signal
        latest = df.iloc[-1]
        if latest['sma_fast'] > latest['sma_slow']:
            return {
                'signal': SignalType.LONG,
                'confidence': 0.8
            }
        elif latest['sma_fast'] < latest['sma_slow']:
            return {
                'signal': SignalType.SHORT,
                'confidence': 0.8
            }

        return {'signal': SignalType.HOLD, 'confidence': 0.0}

# Create configuration
config = StrategyConfig(
    name="Simple SMA Strategy",
    code="SMA_CROSS_V1",
    author="Your Name",
    pair="BTC_USDT",
    leverage=10,
    risk_per_trade=0.01
)

# Create and run strategy
strategy = MyStrategy(config)
```

### Backtesting

```python
from crypto_strategy_sdk import BacktestEngine

# Load your historical data
data = pd.read_csv('btc_data.csv')  # Should have OHLCV columns

# Run backtest
backtest = BacktestEngine(strategy, initial_balance=10000)
results = backtest.run_backtest(data)

print(f"Total Return: {results['summary']['total_return_pct']:.2f}%")
print(f"Sharpe Ratio: {results['summary']['sharpe_ratio']:.2f}")
print(f"Max Drawdown: {results['summary']['max_drawdown_pct']:.2f}%")
```

## Strategy Development Guide

### 1. Strategy Structure

Every strategy must inherit from `BaseStrategy` and implement these methods:

```python
class MyStrategy(BaseStrategy):
    def initialize(self):
        """Called once when strategy starts"""
        pass

    def generate_signals(self, df: pd.DataFrame) -> dict:
        """Called for each new bar of data"""
        pass

    # Optional methods
    def on_tick(self, tick_data):
        """Real-time tick processing"""
        pass

    def on_trade(self, trade_data):
        """Handle trade execution"""
        pass
```

### 2. Configuration

Use YAML or JSON files for strategy configuration:

```yaml
# strategy_config.yaml
name: "My Strategy"
code: "MY_STRAT_V1"
author: "Your Name"
description: "Strategy description"

# Trading parameters
leverage: 10
risk_per_trade: 0.01
pair: "BTC_USDT"
margin_currency: "USDT"

# Technical parameters
resolution: "5"  # 5-minute bars
lookback_period: 200

# Risk management
sl_atr_multiplier: 2.0
tp_atr_multiplier: 2.5
max_positions: 1
max_daily_loss: 0.05
```

Load configuration:

```python
config = StrategyConfig.from_yaml('strategy_config.yaml')
strategy = MyStrategy(config)
```

### 3. Technical Indicators

The SDK provides 20+ built-in technical indicators:

```python
def generate_signals(self, df):
    # Moving averages
    df['sma_20'] = self.indicators.sma(df, 20)
    df['ema_12'] = self.indicators.ema(df, 12)

    # Oscillators
    df['rsi'] = self.indicators.rsi(df, 14)
    df['stoch_k'], df['stoch_d'] = self.indicators.stochastic(df)

    # Volatility
    df['atr'] = self.indicators.atr(df, 14)
    bb_lower, bb_middle, bb_upper = self.indicators.bollinger_bands(df)

    # Trend
    df['supertrend'], df['trend'] = self.indicators.supertrend(df)
    macd, signal, hist = self.indicators.macd(df)
```

### 4. Risk Management

The SDK includes comprehensive risk management:

```python
def initialize(self):
    # Risk manager automatically applies:
    # - Position sizing based on risk_per_trade
    # - Stop loss using ATR
    # - Daily loss limits
    # - Position limits

    # Access risk metrics
    risk_metrics = self.risk_manager.get_risk_metrics()
    print(f"Current drawdown: {risk_metrics['current_drawdown']:.2f}%")
```

## Complete Example: Moving Average Crossover

See `examples/` directory for complete strategy examples including:
- Simple Moving Average Crossover
- Mean Reversion Strategy
- Momentum Strategy
- Multi-timeframe Strategy

## API Reference

### BaseStrategy

Core abstract class for all strategies.

**Methods:**
- `initialize()`: Setup strategy parameters
- `generate_signals(df)`: Generate trading signals
- `on_tick(tick_data)`: Process real-time ticks (optional)
- `on_trade(trade_data)`: Handle trade events (optional)

### StrategyConfig

Configuration management for strategies.

**Methods:**
- `from_yaml(path)`: Load from YAML file
- `from_json(path)`: Load from JSON file
- `validate()`: Validate configuration
- `to_yaml(path)`: Save to YAML file

### TechnicalIndicators

Technical analysis indicators.

**Available Indicators:**
- Moving Averages: `sma()`, `ema()`
- Oscillators: `rsi()`, `stochastic()`, `williams_r()`, `cci()`
- Volatility: `atr()`, `bollinger_bands()`
- Trend: `supertrend()`, `macd()`
- Volume: `mfi()`, `obv()`, `vwap()`

### BacktestEngine

Backtesting framework with realistic modeling.

**Features:**
- Slippage modeling
- Commission calculation
- Performance metrics
- Equity curve analysis
- Export capabilities

### RiskManager

Risk management and position sizing.

**Features:**
- Multiple position sizing methods
- Automatic stop loss/take profit
- Daily loss limits
- Drawdown protection
- Performance tracking

## Development

### Running Tests

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest tests/

# Run with coverage
pytest --cov=crypto_strategy_sdk tests/
```

### Code Style

```bash
# Format code
black crypto_strategy_sdk/

# Lint code
flake8 crypto_strategy_sdk/

# Type checking
mypy crypto_strategy_sdk/
```

## Exchange Integration

The SDK supports multiple cryptocurrency exchanges:

- Binance
- Coinbase Pro
- Kraken
- BitMEX
- And more...

Configure your exchange credentials:

```python
from crypto_strategy_sdk import CryptoClient

client = CryptoClient(
    exchange="binance",
    api_key="your_api_key",
    api_secret="your_api_secret"
)
```

## Performance Optimization

- **Vectorized Operations**: All indicators use NumPy for fast computation
- **Memory Efficient**: Streaming data processing for large datasets
- **Parallel Backtesting**: Multi-threaded backtesting for speed
- **Caching**: Intelligent caching of computed indicators

## Community

- **Documentation**: [crypto-strategy-sdk.readthedocs.io](https://crypto-strategy-sdk.readthedocs.io)
- **Issues**: [GitHub Issues](https://github.com/crypto-strategy/crypto-strategy-sdk/issues)
- **Discussions**: [GitHub Discussions](https://github.com/crypto-strategy/crypto-strategy-sdk/discussions)

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

## License

MIT License - see [LICENSE](LICENSE) file for details.

## Disclaimer

This software is for educational and research purposes only. Trading cryptocurrencies involves substantial risk of loss and is not suitable for all investors. Past performance does not guarantee future results.
